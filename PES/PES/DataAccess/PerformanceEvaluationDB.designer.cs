#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PES.DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PerformaceEvaluation")]
	public partial class PerformanceEvaluationDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertEvaluatedPoint(EvaluatedPoint instance);
    partial void UpdateEvaluatedPoint(EvaluatedPoint instance);
    partial void DeleteEvaluatedPoint(EvaluatedPoint instance);
    partial void InsertEvaluationPeriod(EvaluationPeriod instance);
    partial void UpdateEvaluationPeriod(EvaluationPeriod instance);
    partial void DeleteEvaluationPeriod(EvaluationPeriod instance);
    partial void InsertLKDatatype(LKDatatype instance);
    partial void UpdateLKDatatype(LKDatatype instance);
    partial void DeleteLKDatatype(LKDatatype instance);
    partial void InsertLKEvaluationPoint(LKEvaluationPoint instance);
    partial void UpdateLKEvaluationPoint(LKEvaluationPoint instance);
    partial void DeleteLKEvaluationPoint(LKEvaluationPoint instance);
    partial void InsertLKSixMonthPlan(LKSixMonthPlan instance);
    partial void UpdateLKSixMonthPlan(LKSixMonthPlan instance);
    partial void DeleteLKSixMonthPlan(LKSixMonthPlan instance);
    partial void InsertLKUsersRole(LKUsersRole instance);
    partial void UpdateLKUsersRole(LKUsersRole instance);
    partial void DeleteLKUsersRole(LKUsersRole instance);
    partial void InsertSixMonthPlan(SixMonthPlan instance);
    partial void UpdateSixMonthPlan(SixMonthPlan instance);
    partial void DeleteSixMonthPlan(SixMonthPlan instance);
    partial void InsertUsersLogIn(UsersLogIn instance);
    partial void UpdateUsersLogIn(UsersLogIn instance);
    partial void DeleteUsersLogIn(UsersLogIn instance);
    #endregion
		
		public PerformanceEvaluationDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["PerformaceEvaluationConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PerformanceEvaluationDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PerformanceEvaluationDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PerformanceEvaluationDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PerformanceEvaluationDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<EvaluatedPoint> EvaluatedPoints
		{
			get
			{
				return this.GetTable<EvaluatedPoint>();
			}
		}
		
		public System.Data.Linq.Table<EvaluationPeriod> EvaluationPeriods
		{
			get
			{
				return this.GetTable<EvaluationPeriod>();
			}
		}
		
		public System.Data.Linq.Table<LKDatatype> LKDatatypes
		{
			get
			{
				return this.GetTable<LKDatatype>();
			}
		}
		
		public System.Data.Linq.Table<LKEvaluationPoint> LKEvaluationPoints
		{
			get
			{
				return this.GetTable<LKEvaluationPoint>();
			}
		}
		
		public System.Data.Linq.Table<LKSixMonthPlan> LKSixMonthPlans
		{
			get
			{
				return this.GetTable<LKSixMonthPlan>();
			}
		}
		
		public System.Data.Linq.Table<LKUsersRole> LKUsersRoles
		{
			get
			{
				return this.GetTable<LKUsersRole>();
			}
		}
		
		public System.Data.Linq.Table<SixMonthPlan> SixMonthPlans
		{
			get
			{
				return this.GetTable<SixMonthPlan>();
			}
		}
		
		public System.Data.Linq.Table<UsersLogIn> UsersLogIns
		{
			get
			{
				return this.GetTable<UsersLogIn>();
			}
		}
		
		public System.Data.Linq.Table<View_EmployessList> View_EmployessLists
		{
			get
			{
				return this.GetTable<View_EmployessList>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _EName;
		
		private string _ELName;
		
		private string _ENameAM;
		
		private string _ELNameAM;
		
		private string _JobPosition;
		
		private string _JobPositionAM;
		
		private string _isActive;
		
		private string _CompanyId;
		
		private EntitySet<EvaluatedPoint> _EvaluatedPoints;
		
		private EntitySet<EvaluatedPoint> _EvaluatedPoints1;
		
		private EntitySet<LKSixMonthPlan> _LKSixMonthPlans;
		
		private EntitySet<SixMonthPlan> _SixMonthPlans;
		
		private EntitySet<SixMonthPlan> _SixMonthPlans1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnENameChanging(string value);
    partial void OnENameChanged();
    partial void OnELNameChanging(string value);
    partial void OnELNameChanged();
    partial void OnENameAMChanging(string value);
    partial void OnENameAMChanged();
    partial void OnELNameAMChanging(string value);
    partial void OnELNameAMChanged();
    partial void OnJobPositionChanging(string value);
    partial void OnJobPositionChanged();
    partial void OnJobPositionAMChanging(string value);
    partial void OnJobPositionAMChanged();
    partial void OnisActiveChanging(string value);
    partial void OnisActiveChanged();
    partial void OnCompanyIdChanging(string value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public Employee()
		{
			this._EvaluatedPoints = new EntitySet<EvaluatedPoint>(new Action<EvaluatedPoint>(this.attach_EvaluatedPoints), new Action<EvaluatedPoint>(this.detach_EvaluatedPoints));
			this._EvaluatedPoints1 = new EntitySet<EvaluatedPoint>(new Action<EvaluatedPoint>(this.attach_EvaluatedPoints1), new Action<EvaluatedPoint>(this.detach_EvaluatedPoints1));
			this._LKSixMonthPlans = new EntitySet<LKSixMonthPlan>(new Action<LKSixMonthPlan>(this.attach_LKSixMonthPlans), new Action<LKSixMonthPlan>(this.detach_LKSixMonthPlans));
			this._SixMonthPlans = new EntitySet<SixMonthPlan>(new Action<SixMonthPlan>(this.attach_SixMonthPlans), new Action<SixMonthPlan>(this.detach_SixMonthPlans));
			this._SixMonthPlans1 = new EntitySet<SixMonthPlan>(new Action<SixMonthPlan>(this.attach_SixMonthPlans1), new Action<SixMonthPlan>(this.detach_SixMonthPlans1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EName", DbType="NVarChar(250)")]
		public string EName
		{
			get
			{
				return this._EName;
			}
			set
			{
				if ((this._EName != value))
				{
					this.OnENameChanging(value);
					this.SendPropertyChanging();
					this._EName = value;
					this.SendPropertyChanged("EName");
					this.OnENameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ELName", DbType="NVarChar(250)")]
		public string ELName
		{
			get
			{
				return this._ELName;
			}
			set
			{
				if ((this._ELName != value))
				{
					this.OnELNameChanging(value);
					this.SendPropertyChanging();
					this._ELName = value;
					this.SendPropertyChanged("ELName");
					this.OnELNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENameAM", DbType="NVarChar(250)")]
		public string ENameAM
		{
			get
			{
				return this._ENameAM;
			}
			set
			{
				if ((this._ENameAM != value))
				{
					this.OnENameAMChanging(value);
					this.SendPropertyChanging();
					this._ENameAM = value;
					this.SendPropertyChanged("ENameAM");
					this.OnENameAMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ELNameAM", DbType="NVarChar(250)")]
		public string ELNameAM
		{
			get
			{
				return this._ELNameAM;
			}
			set
			{
				if ((this._ELNameAM != value))
				{
					this.OnELNameAMChanging(value);
					this.SendPropertyChanging();
					this._ELNameAM = value;
					this.SendPropertyChanged("ELNameAM");
					this.OnELNameAMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobPosition", DbType="NVarChar(250)")]
		public string JobPosition
		{
			get
			{
				return this._JobPosition;
			}
			set
			{
				if ((this._JobPosition != value))
				{
					this.OnJobPositionChanging(value);
					this.SendPropertyChanging();
					this._JobPosition = value;
					this.SendPropertyChanged("JobPosition");
					this.OnJobPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobPositionAM", DbType="NVarChar(250)")]
		public string JobPositionAM
		{
			get
			{
				return this._JobPositionAM;
			}
			set
			{
				if ((this._JobPositionAM != value))
				{
					this.OnJobPositionAMChanging(value);
					this.SendPropertyChanging();
					this._JobPositionAM = value;
					this.SendPropertyChanged("JobPositionAM");
					this.OnJobPositionAMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="NVarChar(10)")]
		public string isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="NVarChar(MAX)")]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EvaluatedPoint", Storage="_EvaluatedPoints", ThisKey="Id", OtherKey="EmployeeId")]
		public EntitySet<EvaluatedPoint> EvaluatedPoints
		{
			get
			{
				return this._EvaluatedPoints;
			}
			set
			{
				this._EvaluatedPoints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EvaluatedPoint1", Storage="_EvaluatedPoints1", ThisKey="Id", OtherKey="EvaluatorId")]
		public EntitySet<EvaluatedPoint> EvaluatedPoints1
		{
			get
			{
				return this._EvaluatedPoints1;
			}
			set
			{
				this._EvaluatedPoints1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_LKSixMonthPlan", Storage="_LKSixMonthPlans", ThisKey="Id", OtherKey="PreparedByID")]
		public EntitySet<LKSixMonthPlan> LKSixMonthPlans
		{
			get
			{
				return this._LKSixMonthPlans;
			}
			set
			{
				this._LKSixMonthPlans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SixMonthPlan", Storage="_SixMonthPlans", ThisKey="Id", OtherKey="PlanSetByEmployeeId")]
		public EntitySet<SixMonthPlan> SixMonthPlans
		{
			get
			{
				return this._SixMonthPlans;
			}
			set
			{
				this._SixMonthPlans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SixMonthPlan1", Storage="_SixMonthPlans1", ThisKey="Id", OtherKey="PlanSetForEmployeeId")]
		public EntitySet<SixMonthPlan> SixMonthPlans1
		{
			get
			{
				return this._SixMonthPlans1;
			}
			set
			{
				this._SixMonthPlans1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EvaluatedPoints(EvaluatedPoint entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EvaluatedPoints(EvaluatedPoint entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EvaluatedPoints1(EvaluatedPoint entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_EvaluatedPoints1(EvaluatedPoint entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_LKSixMonthPlans(LKSixMonthPlan entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_LKSixMonthPlans(LKSixMonthPlan entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_SixMonthPlans(SixMonthPlan entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_SixMonthPlans(SixMonthPlan entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_SixMonthPlans1(SixMonthPlan entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_SixMonthPlans1(SixMonthPlan entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EvaluatedPoints")]
	public partial class EvaluatedPoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _EmployeeId;
		
		private System.Nullable<int> _EvaluatorId;
		
		private System.Nullable<int> _EvaluationPointName;
		
		private System.Nullable<int> _EvaluationPeriod;
		
		private string _EvaluationPointGiven;
		
		private System.Nullable<System.DateTime> _evaluationDate;
		
		private System.Nullable<bool> _IsSubmitted;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
		private EntityRef<EvaluationPeriod> _EvaluationPeriod1;
		
		private EntityRef<LKEvaluationPoint> _LKEvaluationPoint;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEmployeeIdChanging(System.Nullable<int> value);
    partial void OnEmployeeIdChanged();
    partial void OnEvaluatorIdChanging(System.Nullable<int> value);
    partial void OnEvaluatorIdChanged();
    partial void OnEvaluationPointNameChanging(System.Nullable<int> value);
    partial void OnEvaluationPointNameChanged();
    partial void OnEvaluationPeriodChanging(System.Nullable<int> value);
    partial void OnEvaluationPeriodChanged();
    partial void OnEvaluationPointGivenChanging(string value);
    partial void OnEvaluationPointGivenChanged();
    partial void OnevaluationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnevaluationDateChanged();
    partial void OnIsSubmittedChanging(System.Nullable<bool> value);
    partial void OnIsSubmittedChanged();
    #endregion
		
		public EvaluatedPoint()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			this._EvaluationPeriod1 = default(EntityRef<EvaluationPeriod>);
			this._LKEvaluationPoint = default(EntityRef<LKEvaluationPoint>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int")]
		public System.Nullable<int> EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluatorId", DbType="Int")]
		public System.Nullable<int> EvaluatorId
		{
			get
			{
				return this._EvaluatorId;
			}
			set
			{
				if ((this._EvaluatorId != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvaluatorIdChanging(value);
					this.SendPropertyChanging();
					this._EvaluatorId = value;
					this.SendPropertyChanged("EvaluatorId");
					this.OnEvaluatorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationPointName", DbType="Int")]
		public System.Nullable<int> EvaluationPointName
		{
			get
			{
				return this._EvaluationPointName;
			}
			set
			{
				if ((this._EvaluationPointName != value))
				{
					if (this._LKEvaluationPoint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvaluationPointNameChanging(value);
					this.SendPropertyChanging();
					this._EvaluationPointName = value;
					this.SendPropertyChanged("EvaluationPointName");
					this.OnEvaluationPointNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationPeriod", DbType="Int")]
		public System.Nullable<int> EvaluationPeriod
		{
			get
			{
				return this._EvaluationPeriod;
			}
			set
			{
				if ((this._EvaluationPeriod != value))
				{
					if (this._EvaluationPeriod1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvaluationPeriodChanging(value);
					this.SendPropertyChanging();
					this._EvaluationPeriod = value;
					this.SendPropertyChanged("EvaluationPeriod");
					this.OnEvaluationPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationPointGiven", DbType="NVarChar(MAX)")]
		public string EvaluationPointGiven
		{
			get
			{
				return this._EvaluationPointGiven;
			}
			set
			{
				if ((this._EvaluationPointGiven != value))
				{
					this.OnEvaluationPointGivenChanging(value);
					this.SendPropertyChanging();
					this._EvaluationPointGiven = value;
					this.SendPropertyChanged("EvaluationPointGiven");
					this.OnEvaluationPointGivenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_evaluationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> evaluationDate
		{
			get
			{
				return this._evaluationDate;
			}
			set
			{
				if ((this._evaluationDate != value))
				{
					this.OnevaluationDateChanging(value);
					this.SendPropertyChanging();
					this._evaluationDate = value;
					this.SendPropertyChanged("evaluationDate");
					this.OnevaluationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSubmitted", DbType="Bit")]
		public System.Nullable<bool> IsSubmitted
		{
			get
			{
				return this._IsSubmitted;
			}
			set
			{
				if ((this._IsSubmitted != value))
				{
					this.OnIsSubmittedChanging(value);
					this.SendPropertyChanging();
					this._IsSubmitted = value;
					this.SendPropertyChanged("IsSubmitted");
					this.OnIsSubmittedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EvaluatedPoint", Storage="_Employee", ThisKey="EmployeeId", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EvaluatedPoints.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EvaluatedPoints.Add(this);
						this._EmployeeId = value.Id;
					}
					else
					{
						this._EmployeeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EvaluatedPoint1", Storage="_Employee1", ThisKey="EvaluatorId", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.EvaluatedPoints1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.EvaluatedPoints1.Add(this);
						this._EvaluatorId = value.Id;
					}
					else
					{
						this._EvaluatorId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EvaluationPeriod_EvaluatedPoint", Storage="_EvaluationPeriod1", ThisKey="EvaluationPeriod", OtherKey="Id", IsForeignKey=true)]
		public EvaluationPeriod EvaluationPeriod1
		{
			get
			{
				return this._EvaluationPeriod1.Entity;
			}
			set
			{
				EvaluationPeriod previousValue = this._EvaluationPeriod1.Entity;
				if (((previousValue != value) 
							|| (this._EvaluationPeriod1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EvaluationPeriod1.Entity = null;
						previousValue.EvaluatedPoints.Remove(this);
					}
					this._EvaluationPeriod1.Entity = value;
					if ((value != null))
					{
						value.EvaluatedPoints.Add(this);
						this._EvaluationPeriod = value.Id;
					}
					else
					{
						this._EvaluationPeriod = default(Nullable<int>);
					}
					this.SendPropertyChanged("EvaluationPeriod1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LKEvaluationPoint_EvaluatedPoint", Storage="_LKEvaluationPoint", ThisKey="EvaluationPointName", OtherKey="Id", IsForeignKey=true)]
		public LKEvaluationPoint LKEvaluationPoint
		{
			get
			{
				return this._LKEvaluationPoint.Entity;
			}
			set
			{
				LKEvaluationPoint previousValue = this._LKEvaluationPoint.Entity;
				if (((previousValue != value) 
							|| (this._LKEvaluationPoint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LKEvaluationPoint.Entity = null;
						previousValue.EvaluatedPoints.Remove(this);
					}
					this._LKEvaluationPoint.Entity = value;
					if ((value != null))
					{
						value.EvaluatedPoints.Add(this);
						this._EvaluationPointName = value.Id;
					}
					else
					{
						this._EvaluationPointName = default(Nullable<int>);
					}
					this.SendPropertyChanged("LKEvaluationPoint");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EvaluationPeriod")]
	public partial class EvaluationPeriod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _EvaluationPeriod1;
		
		private string _isClosed;
		
		private EntitySet<EvaluatedPoint> _EvaluatedPoints;
		
		private EntitySet<SixMonthPlan> _SixMonthPlans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEvaluationPeriod1Changing(string value);
    partial void OnEvaluationPeriod1Changed();
    partial void OnisClosedChanging(string value);
    partial void OnisClosedChanged();
    #endregion
		
		public EvaluationPeriod()
		{
			this._EvaluatedPoints = new EntitySet<EvaluatedPoint>(new Action<EvaluatedPoint>(this.attach_EvaluatedPoints), new Action<EvaluatedPoint>(this.detach_EvaluatedPoints));
			this._SixMonthPlans = new EntitySet<SixMonthPlan>(new Action<SixMonthPlan>(this.attach_SixMonthPlans), new Action<SixMonthPlan>(this.detach_SixMonthPlans));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="EvaluationPeriod", Storage="_EvaluationPeriod1", DbType="NVarChar(250)")]
		public string EvaluationPeriod1
		{
			get
			{
				return this._EvaluationPeriod1;
			}
			set
			{
				if ((this._EvaluationPeriod1 != value))
				{
					this.OnEvaluationPeriod1Changing(value);
					this.SendPropertyChanging();
					this._EvaluationPeriod1 = value;
					this.SendPropertyChanged("EvaluationPeriod1");
					this.OnEvaluationPeriod1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isClosed", DbType="NVarChar(1)")]
		public string isClosed
		{
			get
			{
				return this._isClosed;
			}
			set
			{
				if ((this._isClosed != value))
				{
					this.OnisClosedChanging(value);
					this.SendPropertyChanging();
					this._isClosed = value;
					this.SendPropertyChanged("isClosed");
					this.OnisClosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EvaluationPeriod_EvaluatedPoint", Storage="_EvaluatedPoints", ThisKey="Id", OtherKey="EvaluationPeriod")]
		public EntitySet<EvaluatedPoint> EvaluatedPoints
		{
			get
			{
				return this._EvaluatedPoints;
			}
			set
			{
				this._EvaluatedPoints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EvaluationPeriod_SixMonthPlan", Storage="_SixMonthPlans", ThisKey="Id", OtherKey="EvaluationPeriod")]
		public EntitySet<SixMonthPlan> SixMonthPlans
		{
			get
			{
				return this._SixMonthPlans;
			}
			set
			{
				this._SixMonthPlans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EvaluatedPoints(EvaluatedPoint entity)
		{
			this.SendPropertyChanging();
			entity.EvaluationPeriod1 = this;
		}
		
		private void detach_EvaluatedPoints(EvaluatedPoint entity)
		{
			this.SendPropertyChanging();
			entity.EvaluationPeriod1 = null;
		}
		
		private void attach_SixMonthPlans(SixMonthPlan entity)
		{
			this.SendPropertyChanging();
			entity.EvaluationPeriod1 = this;
		}
		
		private void detach_SixMonthPlans(SixMonthPlan entity)
		{
			this.SendPropertyChanging();
			entity.EvaluationPeriod1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LKDatatypes")]
	public partial class LKDatatype : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _TypeName;
		
		private string _Remarks;
		
		private EntitySet<LKEvaluationPoint> _LKEvaluationPoints;
		
		private EntitySet<LKSixMonthPlan> _LKSixMonthPlans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    #endregion
		
		public LKDatatype()
		{
			this._LKEvaluationPoints = new EntitySet<LKEvaluationPoint>(new Action<LKEvaluationPoint>(this.attach_LKEvaluationPoints), new Action<LKEvaluationPoint>(this.detach_LKEvaluationPoints));
			this._LKSixMonthPlans = new EntitySet<LKSixMonthPlan>(new Action<LKSixMonthPlan>(this.attach_LKSixMonthPlans), new Action<LKSixMonthPlan>(this.detach_LKSixMonthPlans));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(250)")]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NVarChar(250)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LKDatatype_LKEvaluationPoint", Storage="_LKEvaluationPoints", ThisKey="Id", OtherKey="DataTypes")]
		public EntitySet<LKEvaluationPoint> LKEvaluationPoints
		{
			get
			{
				return this._LKEvaluationPoints;
			}
			set
			{
				this._LKEvaluationPoints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LKDatatype_LKSixMonthPlan", Storage="_LKSixMonthPlans", ThisKey="Id", OtherKey="DataTypeSelection")]
		public EntitySet<LKSixMonthPlan> LKSixMonthPlans
		{
			get
			{
				return this._LKSixMonthPlans;
			}
			set
			{
				this._LKSixMonthPlans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LKEvaluationPoints(LKEvaluationPoint entity)
		{
			this.SendPropertyChanging();
			entity.LKDatatype = this;
		}
		
		private void detach_LKEvaluationPoints(LKEvaluationPoint entity)
		{
			this.SendPropertyChanging();
			entity.LKDatatype = null;
		}
		
		private void attach_LKSixMonthPlans(LKSixMonthPlan entity)
		{
			this.SendPropertyChanging();
			entity.LKDatatype = this;
		}
		
		private void detach_LKSixMonthPlans(LKSixMonthPlan entity)
		{
			this.SendPropertyChanging();
			entity.LKDatatype = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LKEvaluationPoints")]
	public partial class LKEvaluationPoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _EvaluationName;
		
		private System.Nullable<int> _MaxRate;
		
		private System.Nullable<int> _MinRate;
		
		private string _Status;
		
		private string _Language;
		
		private System.Nullable<int> _DataTypes;
		
		private EntitySet<EvaluatedPoint> _EvaluatedPoints;
		
		private EntityRef<LKDatatype> _LKDatatype;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEvaluationNameChanging(string value);
    partial void OnEvaluationNameChanged();
    partial void OnMaxRateChanging(System.Nullable<int> value);
    partial void OnMaxRateChanged();
    partial void OnMinRateChanging(System.Nullable<int> value);
    partial void OnMinRateChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnLanguageChanging(string value);
    partial void OnLanguageChanged();
    partial void OnDataTypesChanging(System.Nullable<int> value);
    partial void OnDataTypesChanged();
    #endregion
		
		public LKEvaluationPoint()
		{
			this._EvaluatedPoints = new EntitySet<EvaluatedPoint>(new Action<EvaluatedPoint>(this.attach_EvaluatedPoints), new Action<EvaluatedPoint>(this.detach_EvaluatedPoints));
			this._LKDatatype = default(EntityRef<LKDatatype>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationName", DbType="NVarChar(250)")]
		public string EvaluationName
		{
			get
			{
				return this._EvaluationName;
			}
			set
			{
				if ((this._EvaluationName != value))
				{
					this.OnEvaluationNameChanging(value);
					this.SendPropertyChanging();
					this._EvaluationName = value;
					this.SendPropertyChanged("EvaluationName");
					this.OnEvaluationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxRate", DbType="Int")]
		public System.Nullable<int> MaxRate
		{
			get
			{
				return this._MaxRate;
			}
			set
			{
				if ((this._MaxRate != value))
				{
					this.OnMaxRateChanging(value);
					this.SendPropertyChanging();
					this._MaxRate = value;
					this.SendPropertyChanged("MaxRate");
					this.OnMaxRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinRate", DbType="Int")]
		public System.Nullable<int> MinRate
		{
			get
			{
				return this._MinRate;
			}
			set
			{
				if ((this._MinRate != value))
				{
					this.OnMinRateChanging(value);
					this.SendPropertyChanging();
					this._MinRate = value;
					this.SendPropertyChanged("MinRate");
					this.OnMinRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(250)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="NVarChar(50)")]
		public string Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this.OnLanguageChanging(value);
					this.SendPropertyChanging();
					this._Language = value;
					this.SendPropertyChanged("Language");
					this.OnLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataTypes", DbType="Int")]
		public System.Nullable<int> DataTypes
		{
			get
			{
				return this._DataTypes;
			}
			set
			{
				if ((this._DataTypes != value))
				{
					if (this._LKDatatype.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataTypesChanging(value);
					this.SendPropertyChanging();
					this._DataTypes = value;
					this.SendPropertyChanged("DataTypes");
					this.OnDataTypesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LKEvaluationPoint_EvaluatedPoint", Storage="_EvaluatedPoints", ThisKey="Id", OtherKey="EvaluationPointName")]
		public EntitySet<EvaluatedPoint> EvaluatedPoints
		{
			get
			{
				return this._EvaluatedPoints;
			}
			set
			{
				this._EvaluatedPoints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LKDatatype_LKEvaluationPoint", Storage="_LKDatatype", ThisKey="DataTypes", OtherKey="Id", IsForeignKey=true)]
		public LKDatatype LKDatatype
		{
			get
			{
				return this._LKDatatype.Entity;
			}
			set
			{
				LKDatatype previousValue = this._LKDatatype.Entity;
				if (((previousValue != value) 
							|| (this._LKDatatype.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LKDatatype.Entity = null;
						previousValue.LKEvaluationPoints.Remove(this);
					}
					this._LKDatatype.Entity = value;
					if ((value != null))
					{
						value.LKEvaluationPoints.Add(this);
						this._DataTypes = value.Id;
					}
					else
					{
						this._DataTypes = default(Nullable<int>);
					}
					this.SendPropertyChanged("LKDatatype");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EvaluatedPoints(EvaluatedPoint entity)
		{
			this.SendPropertyChanging();
			entity.LKEvaluationPoint = this;
		}
		
		private void detach_EvaluatedPoints(EvaluatedPoint entity)
		{
			this.SendPropertyChanging();
			entity.LKEvaluationPoint = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LKSixMonthPlan")]
	public partial class LKSixMonthPlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _PlanName;
		
		private System.Nullable<int> _DataTypeSelection;
		
		private string _LanguageSelection;
		
		private string _StatusRemark;
		
		private System.Nullable<int> _PreparedByID;
		
		private EntitySet<SixMonthPlan> _SixMonthPlans;
		
		private EntityRef<LKDatatype> _LKDatatype;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPlanNameChanging(string value);
    partial void OnPlanNameChanged();
    partial void OnDataTypeSelectionChanging(System.Nullable<int> value);
    partial void OnDataTypeSelectionChanged();
    partial void OnLanguageSelectionChanging(string value);
    partial void OnLanguageSelectionChanged();
    partial void OnStatusRemarkChanging(string value);
    partial void OnStatusRemarkChanged();
    partial void OnPreparedByIDChanging(System.Nullable<int> value);
    partial void OnPreparedByIDChanged();
    #endregion
		
		public LKSixMonthPlan()
		{
			this._SixMonthPlans = new EntitySet<SixMonthPlan>(new Action<SixMonthPlan>(this.attach_SixMonthPlans), new Action<SixMonthPlan>(this.detach_SixMonthPlans));
			this._LKDatatype = default(EntityRef<LKDatatype>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PlanName
		{
			get
			{
				return this._PlanName;
			}
			set
			{
				if ((this._PlanName != value))
				{
					this.OnPlanNameChanging(value);
					this.SendPropertyChanging();
					this._PlanName = value;
					this.SendPropertyChanged("PlanName");
					this.OnPlanNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataTypeSelection", DbType="Int")]
		public System.Nullable<int> DataTypeSelection
		{
			get
			{
				return this._DataTypeSelection;
			}
			set
			{
				if ((this._DataTypeSelection != value))
				{
					if (this._LKDatatype.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataTypeSelectionChanging(value);
					this.SendPropertyChanging();
					this._DataTypeSelection = value;
					this.SendPropertyChanged("DataTypeSelection");
					this.OnDataTypeSelectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageSelection", DbType="NVarChar(25)")]
		public string LanguageSelection
		{
			get
			{
				return this._LanguageSelection;
			}
			set
			{
				if ((this._LanguageSelection != value))
				{
					this.OnLanguageSelectionChanging(value);
					this.SendPropertyChanging();
					this._LanguageSelection = value;
					this.SendPropertyChanged("LanguageSelection");
					this.OnLanguageSelectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusRemark", DbType="NVarChar(MAX)")]
		public string StatusRemark
		{
			get
			{
				return this._StatusRemark;
			}
			set
			{
				if ((this._StatusRemark != value))
				{
					this.OnStatusRemarkChanging(value);
					this.SendPropertyChanging();
					this._StatusRemark = value;
					this.SendPropertyChanged("StatusRemark");
					this.OnStatusRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreparedByID", DbType="Int")]
		public System.Nullable<int> PreparedByID
		{
			get
			{
				return this._PreparedByID;
			}
			set
			{
				if ((this._PreparedByID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPreparedByIDChanging(value);
					this.SendPropertyChanging();
					this._PreparedByID = value;
					this.SendPropertyChanged("PreparedByID");
					this.OnPreparedByIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LKSixMonthPlan_SixMonthPlan", Storage="_SixMonthPlans", ThisKey="Id", OtherKey="PlanName")]
		public EntitySet<SixMonthPlan> SixMonthPlans
		{
			get
			{
				return this._SixMonthPlans;
			}
			set
			{
				this._SixMonthPlans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LKDatatype_LKSixMonthPlan", Storage="_LKDatatype", ThisKey="DataTypeSelection", OtherKey="Id", IsForeignKey=true)]
		public LKDatatype LKDatatype
		{
			get
			{
				return this._LKDatatype.Entity;
			}
			set
			{
				LKDatatype previousValue = this._LKDatatype.Entity;
				if (((previousValue != value) 
							|| (this._LKDatatype.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LKDatatype.Entity = null;
						previousValue.LKSixMonthPlans.Remove(this);
					}
					this._LKDatatype.Entity = value;
					if ((value != null))
					{
						value.LKSixMonthPlans.Add(this);
						this._DataTypeSelection = value.Id;
					}
					else
					{
						this._DataTypeSelection = default(Nullable<int>);
					}
					this.SendPropertyChanged("LKDatatype");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_LKSixMonthPlan", Storage="_Employee", ThisKey="PreparedByID", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.LKSixMonthPlans.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.LKSixMonthPlans.Add(this);
						this._PreparedByID = value.Id;
					}
					else
					{
						this._PreparedByID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SixMonthPlans(SixMonthPlan entity)
		{
			this.SendPropertyChanging();
			entity.LKSixMonthPlan = this;
		}
		
		private void detach_SixMonthPlans(SixMonthPlan entity)
		{
			this.SendPropertyChanging();
			entity.LKSixMonthPlan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LKUsersRoles")]
	public partial class LKUsersRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _RoleName;
		
		private string _statusRemark;
		
		private EntitySet<UsersLogIn> _UsersLogIns;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnstatusRemarkChanging(string value);
    partial void OnstatusRemarkChanged();
    #endregion
		
		public LKUsersRole()
		{
			this._UsersLogIns = new EntitySet<UsersLogIn>(new Action<UsersLogIn>(this.attach_UsersLogIns), new Action<UsersLogIn>(this.detach_UsersLogIns));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_statusRemark", DbType="NVarChar(250)")]
		public string statusRemark
		{
			get
			{
				return this._statusRemark;
			}
			set
			{
				if ((this._statusRemark != value))
				{
					this.OnstatusRemarkChanging(value);
					this.SendPropertyChanging();
					this._statusRemark = value;
					this.SendPropertyChanged("statusRemark");
					this.OnstatusRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LKUsersRole_UsersLogIn", Storage="_UsersLogIns", ThisKey="Id", OtherKey="UserRole")]
		public EntitySet<UsersLogIn> UsersLogIns
		{
			get
			{
				return this._UsersLogIns;
			}
			set
			{
				this._UsersLogIns.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersLogIns(UsersLogIn entity)
		{
			this.SendPropertyChanging();
			entity.LKUsersRole = this;
		}
		
		private void detach_UsersLogIns(UsersLogIn entity)
		{
			this.SendPropertyChanging();
			entity.LKUsersRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SixMonthPlan")]
	public partial class SixMonthPlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _PlanSetByEmployeeId;
		
		private System.Nullable<int> _EvaluationPeriod;
		
		private int _PlanName;
		
		private string _PriorityGiven;
		
		private System.Nullable<System.DateTime> _DatePlanned;
		
		private string _StatusRemark;
		
		private System.Nullable<bool> _IsSubmitted;
		
		private System.Nullable<int> _PlanSetForEmployeeId;
		
		private EntityRef<EvaluationPeriod> _EvaluationPeriod1;
		
		private EntityRef<LKSixMonthPlan> _LKSixMonthPlan;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPlanSetByEmployeeIdChanging(System.Nullable<int> value);
    partial void OnPlanSetByEmployeeIdChanged();
    partial void OnEvaluationPeriodChanging(System.Nullable<int> value);
    partial void OnEvaluationPeriodChanged();
    partial void OnPlanNameChanging(int value);
    partial void OnPlanNameChanged();
    partial void OnPriorityGivenChanging(string value);
    partial void OnPriorityGivenChanged();
    partial void OnDatePlannedChanging(System.Nullable<System.DateTime> value);
    partial void OnDatePlannedChanged();
    partial void OnStatusRemarkChanging(string value);
    partial void OnStatusRemarkChanged();
    partial void OnIsSubmittedChanging(System.Nullable<bool> value);
    partial void OnIsSubmittedChanged();
    partial void OnPlanSetForEmployeeIdChanging(System.Nullable<int> value);
    partial void OnPlanSetForEmployeeIdChanged();
    #endregion
		
		public SixMonthPlan()
		{
			this._EvaluationPeriod1 = default(EntityRef<EvaluationPeriod>);
			this._LKSixMonthPlan = default(EntityRef<LKSixMonthPlan>);
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanSetByEmployeeId", DbType="Int")]
		public System.Nullable<int> PlanSetByEmployeeId
		{
			get
			{
				return this._PlanSetByEmployeeId;
			}
			set
			{
				if ((this._PlanSetByEmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlanSetByEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._PlanSetByEmployeeId = value;
					this.SendPropertyChanged("PlanSetByEmployeeId");
					this.OnPlanSetByEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationPeriod", DbType="Int")]
		public System.Nullable<int> EvaluationPeriod
		{
			get
			{
				return this._EvaluationPeriod;
			}
			set
			{
				if ((this._EvaluationPeriod != value))
				{
					if (this._EvaluationPeriod1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvaluationPeriodChanging(value);
					this.SendPropertyChanging();
					this._EvaluationPeriod = value;
					this.SendPropertyChanged("EvaluationPeriod");
					this.OnEvaluationPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanName", DbType="Int NOT NULL")]
		public int PlanName
		{
			get
			{
				return this._PlanName;
			}
			set
			{
				if ((this._PlanName != value))
				{
					if (this._LKSixMonthPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlanNameChanging(value);
					this.SendPropertyChanging();
					this._PlanName = value;
					this.SendPropertyChanged("PlanName");
					this.OnPlanNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriorityGiven", DbType="NVarChar(MAX)")]
		public string PriorityGiven
		{
			get
			{
				return this._PriorityGiven;
			}
			set
			{
				if ((this._PriorityGiven != value))
				{
					this.OnPriorityGivenChanging(value);
					this.SendPropertyChanging();
					this._PriorityGiven = value;
					this.SendPropertyChanged("PriorityGiven");
					this.OnPriorityGivenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePlanned", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatePlanned
		{
			get
			{
				return this._DatePlanned;
			}
			set
			{
				if ((this._DatePlanned != value))
				{
					this.OnDatePlannedChanging(value);
					this.SendPropertyChanging();
					this._DatePlanned = value;
					this.SendPropertyChanged("DatePlanned");
					this.OnDatePlannedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusRemark", DbType="NVarChar(MAX)")]
		public string StatusRemark
		{
			get
			{
				return this._StatusRemark;
			}
			set
			{
				if ((this._StatusRemark != value))
				{
					this.OnStatusRemarkChanging(value);
					this.SendPropertyChanging();
					this._StatusRemark = value;
					this.SendPropertyChanged("StatusRemark");
					this.OnStatusRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSubmitted", DbType="Bit")]
		public System.Nullable<bool> IsSubmitted
		{
			get
			{
				return this._IsSubmitted;
			}
			set
			{
				if ((this._IsSubmitted != value))
				{
					this.OnIsSubmittedChanging(value);
					this.SendPropertyChanging();
					this._IsSubmitted = value;
					this.SendPropertyChanged("IsSubmitted");
					this.OnIsSubmittedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanSetForEmployeeId", DbType="Int")]
		public System.Nullable<int> PlanSetForEmployeeId
		{
			get
			{
				return this._PlanSetForEmployeeId;
			}
			set
			{
				if ((this._PlanSetForEmployeeId != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlanSetForEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._PlanSetForEmployeeId = value;
					this.SendPropertyChanged("PlanSetForEmployeeId");
					this.OnPlanSetForEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EvaluationPeriod_SixMonthPlan", Storage="_EvaluationPeriod1", ThisKey="EvaluationPeriod", OtherKey="Id", IsForeignKey=true)]
		public EvaluationPeriod EvaluationPeriod1
		{
			get
			{
				return this._EvaluationPeriod1.Entity;
			}
			set
			{
				EvaluationPeriod previousValue = this._EvaluationPeriod1.Entity;
				if (((previousValue != value) 
							|| (this._EvaluationPeriod1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EvaluationPeriod1.Entity = null;
						previousValue.SixMonthPlans.Remove(this);
					}
					this._EvaluationPeriod1.Entity = value;
					if ((value != null))
					{
						value.SixMonthPlans.Add(this);
						this._EvaluationPeriod = value.Id;
					}
					else
					{
						this._EvaluationPeriod = default(Nullable<int>);
					}
					this.SendPropertyChanged("EvaluationPeriod1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LKSixMonthPlan_SixMonthPlan", Storage="_LKSixMonthPlan", ThisKey="PlanName", OtherKey="Id", IsForeignKey=true)]
		public LKSixMonthPlan LKSixMonthPlan
		{
			get
			{
				return this._LKSixMonthPlan.Entity;
			}
			set
			{
				LKSixMonthPlan previousValue = this._LKSixMonthPlan.Entity;
				if (((previousValue != value) 
							|| (this._LKSixMonthPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LKSixMonthPlan.Entity = null;
						previousValue.SixMonthPlans.Remove(this);
					}
					this._LKSixMonthPlan.Entity = value;
					if ((value != null))
					{
						value.SixMonthPlans.Add(this);
						this._PlanName = value.Id;
					}
					else
					{
						this._PlanName = default(int);
					}
					this.SendPropertyChanged("LKSixMonthPlan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SixMonthPlan", Storage="_Employee", ThisKey="PlanSetByEmployeeId", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.SixMonthPlans.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.SixMonthPlans.Add(this);
						this._PlanSetByEmployeeId = value.Id;
					}
					else
					{
						this._PlanSetByEmployeeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SixMonthPlan1", Storage="_Employee1", ThisKey="PlanSetForEmployeeId", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.SixMonthPlans1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.SixMonthPlans1.Add(this);
						this._PlanSetForEmployeeId = value.Id;
					}
					else
					{
						this._PlanSetForEmployeeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsersLogIn")]
	public partial class UsersLogIn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserName;
		
		private string _Pwd;
		
		private string _IsActive;
		
		private string _CompanyId;
		
		private System.Nullable<int> _UserRole;
		
		private EntityRef<LKUsersRole> _LKUsersRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPwdChanging(string value);
    partial void OnPwdChanged();
    partial void OnIsActiveChanging(string value);
    partial void OnIsActiveChanged();
    partial void OnCompanyIdChanging(string value);
    partial void OnCompanyIdChanged();
    partial void OnUserRoleChanging(System.Nullable<int> value);
    partial void OnUserRoleChanged();
    #endregion
		
		public UsersLogIn()
		{
			this._LKUsersRole = default(EntityRef<LKUsersRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(250)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pwd", DbType="NVarChar(250)")]
		public string Pwd
		{
			get
			{
				return this._Pwd;
			}
			set
			{
				if ((this._Pwd != value))
				{
					this.OnPwdChanging(value);
					this.SendPropertyChanging();
					this._Pwd = value;
					this.SendPropertyChanged("Pwd");
					this.OnPwdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="NVarChar(10)")]
		public string IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="NVarChar(MAX)")]
		public string CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRole", DbType="Int")]
		public System.Nullable<int> UserRole
		{
			get
			{
				return this._UserRole;
			}
			set
			{
				if ((this._UserRole != value))
				{
					if (this._LKUsersRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserRoleChanging(value);
					this.SendPropertyChanging();
					this._UserRole = value;
					this.SendPropertyChanged("UserRole");
					this.OnUserRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LKUsersRole_UsersLogIn", Storage="_LKUsersRole", ThisKey="UserRole", OtherKey="Id", IsForeignKey=true)]
		public LKUsersRole LKUsersRole
		{
			get
			{
				return this._LKUsersRole.Entity;
			}
			set
			{
				LKUsersRole previousValue = this._LKUsersRole.Entity;
				if (((previousValue != value) 
							|| (this._LKUsersRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LKUsersRole.Entity = null;
						previousValue.UsersLogIns.Remove(this);
					}
					this._LKUsersRole.Entity = value;
					if ((value != null))
					{
						value.UsersLogIns.Add(this);
						this._UserRole = value.Id;
					}
					else
					{
						this._UserRole = default(Nullable<int>);
					}
					this.SendPropertyChanged("LKUsersRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.View_EmployessList")]
	public partial class View_EmployessList
	{
		
		private int _Id;
		
		private string _FullENName;
		
		private string _ELFullNameEN;
		
		public View_EmployessList()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullENName", DbType="NVarChar(MAX)")]
		public string FullENName
		{
			get
			{
				return this._FullENName;
			}
			set
			{
				if ((this._FullENName != value))
				{
					this._FullENName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ELFullNameEN", DbType="NVarChar(MAX)")]
		public string ELFullNameEN
		{
			get
			{
				return this._ELFullNameEN;
			}
			set
			{
				if ((this._ELFullNameEN != value))
				{
					this._ELFullNameEN = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
